library identifier: 'jenkins-share-library@master', retriever: modernSCM(
  github(traits: [gitHubBranchDiscovery(1), 
  gitHubPullRequestDiscovery(1), 
  gitHubForkDiscovery(strategyId: 1, trust: gitHubTrustPermissions())], 
  credentialsId: 'github-caolv', 
  repository: 'jenkins-share-library', 
  repoOwner: 'return200-ok'))

pipeline {
  agent any
  tools {
      maven 'maven-instance'
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
  }
  environment {
     branchName = "${bitbucket_push_changes_0_new_name}"
     serviceName = parseServiceName()
     DOCKER_REGISTRY_URL = ""
     REGISTRY_CREDENTIAL = ""
     imageName = "$DOCKER_REGISTRY_URL/${serviceName}-${branchName}"
     repoUrl="${bitbucket_repository_links_html_href}.git"

  }
  stages {
    stage('Checkout') {
      steps {
        script{
          sh 'printenv'
          checkOutFrom(branches:"$branchName", CREDENTIAL_ID:"d281bfc1-1637-4c18-a8a2-cf3567ce567f", repo_url:"$repoURL")
        }
      }
    }
    stage('Scan') {
      agent {
        docker { image 'maven:3.8.1-adoptopenjdk-11' }
      }
      steps {
        withSonarQubeEnv(installationName: 'sq1') { 
          sh "mvn clean verify sonar:sonar -Dsonar.projectKey=$serviceName"
        }
      }
    }
    stage('buildMavenApp'){  
      steps{ 
        script{ 
          buildMavenApp()
          env.imageTag= sh(script: 'mvn help:evaluate -Dexpression=project.version -q -DforceStdout', returnStdout: true)
        }
      }
    }
    stage('deployArtifacts'){
      steps{
        script{
          pushArtifacts()
        }
      }
    }
    stage('Dockerize'){
      steps{
        script{
          dockerizeApplication(serviceName:"$serviceName-${branchName}", DOCKER_REGISTRY_URL:"$DOCKER_REGISTRY_URL", REGISTRY_CREDENTIAL:"$REGISTRY_CREDENTIAL")
        }
      }
    }
    stage('Deploy'){
      steps{
        script{
          env.imageVersion="$imageName:$imageTag"
          env.deployEnviroment="k8s"
          deployApplication(jobName:"$serviceName", imageVersion:"$imageVersion", deployEnviroment:"$deployEnviroment")
        }
      }
    }
    stage('Feedback') {
      steps{
        emailext (
          attachLog: true,
          subject: "${env.serviceName} - Build # $BUILD_NUMBER - ${currentBuild.currentResult}!",
          to: 'lenhhoxung98s@gmail.com',
          body: """ <p>${currentBuild.currentResult}: Job '${env.JOB_NAME} [${env.BUILD_NUMBER}]':</p>
                    <p>Please check console output at <a href='${env.BUILD_URL}'>${env.JOB_NAME} [${env.BUILD_NUMBER}]</a> to view the results.</p>""",
          recipientProviders: [[$class: 'DevelopersRecipientProvider']]
        )
      }
    }
  }
}
///docs